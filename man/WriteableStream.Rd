% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WriteableStream.R
\name{WriteableStream}
\alias{WriteableStream}
\title{WriteableStream}
\description{
An abstraction for writing streaming data.

Data will be buffered in an internal queue before being
written to the underlying sink
}
\details{
Events:
\itemize{
\item start
\item error
\item drain
\item backpressure
\item close
}
}
\seealso{
Other streams: 
\code{\link{ReadableStream}},
\code{\link{TransformStream}}
}
\concept{streams}
\section{Super class}{
\code{\link[streams:EventEmitter]{streams::EventEmitter}} -> \code{WriteableStream}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{current_state}}{1}

\item{\code{is_ready}}{1}

\item{\code{is_locked}}{1}

\item{\code{controller}}{1}

\item{\code{desired_size}}{1}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-WriteableStream-new}{\code{WriteableStream$new()}}
\item \href{#method-WriteableStream-write}{\code{WriteableStream$write()}}
\item \href{#method-WriteableStream-abort}{\code{WriteableStream$abort()}}
\item \href{#method-WriteableStream-close}{\code{WriteableStream$close()}}
\item \href{#method-WriteableStream-lock_stream}{\code{WriteableStream$lock_stream()}}
\item \href{#method-WriteableStream-print}{\code{WriteableStream$print()}}
\item \href{#method-WriteableStream-format}{\code{WriteableStream$format()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="emit"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-emit'><code>streams::EventEmitter$emit()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="event_names"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-event_names'><code>streams::EventEmitter$event_names()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="get_max_listeners"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-get_max_listeners'><code>streams::EventEmitter$get_max_listeners()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="listener_count"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-listener_count'><code>streams::EventEmitter$listener_count()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="off"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-off'><code>streams::EventEmitter$off()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="on"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-on'><code>streams::EventEmitter$on()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="once"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-once'><code>streams::EventEmitter$once()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="prepend_listener"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-prepend_listener'><code>streams::EventEmitter$prepend_listener()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="prepend_once_listener"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-prepend_once_listener'><code>streams::EventEmitter$prepend_once_listener()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="raw_listeners"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-raw_listeners'><code>streams::EventEmitter$raw_listeners()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="remove_all_listeners"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-remove_all_listeners'><code>streams::EventEmitter$remove_all_listeners()</code></a></li>
<li><span class="pkg-link" data-pkg="streams" data-topic="EventEmitter" data-id="set_max_listeners"><a href='../../streams/html/EventEmitter.html#method-EventEmitter-set_max_listeners'><code>streams::EventEmitter$set_max_listeners()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WriteableStream-new"></a>}}
\if{latex}{\out{\hypertarget{method-WriteableStream-new}{}}}
\subsection{Method \code{new()}}{
Create a new ReadableStream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WriteableStream$new(
  start = NULL,
  write = NULL,
  flush = NULL,
  abort = NULL,
  queue_strategy = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{start}}{a function that is called once the stream enters the "started" state}

\item{\code{write}}{a function that is called whenever the stream attempts to write to the underlying source}

\item{\code{flush}}{a function that is called prior to the stream ending}

\item{\code{abort}}{a function that is called to immediately abort the stream,
dropping all unconsumed chunks in the process}

\item{\code{queue_strategy}}{a QueueStrategy object, describing how chunks will be buffered
by the stream}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WriteableStream-write"></a>}}
\if{latex}{\out{\hypertarget{method-WriteableStream-write}{}}}
\subsection{Method \code{write()}}{
1
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WriteableStream$write(chunk)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{chunk}}{data}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WriteableStream-abort"></a>}}
\if{latex}{\out{\hypertarget{method-WriteableStream-abort}{}}}
\subsection{Method \code{abort()}}{
1
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WriteableStream$abort()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WriteableStream-close"></a>}}
\if{latex}{\out{\hypertarget{method-WriteableStream-close}{}}}
\subsection{Method \code{close()}}{
1
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WriteableStream$close()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WriteableStream-lock_stream"></a>}}
\if{latex}{\out{\hypertarget{method-WriteableStream-lock_stream}{}}}
\subsection{Method \code{lock_stream()}}{
1
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WriteableStream$lock_stream(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{1}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WriteableStream-print"></a>}}
\if{latex}{\out{\hypertarget{method-WriteableStream-print}{}}}
\subsection{Method \code{print()}}{
1
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WriteableStream$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WriteableStream-format"></a>}}
\if{latex}{\out{\hypertarget{method-WriteableStream-format}{}}}
\subsection{Method \code{format()}}{
1
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WriteableStream$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{1}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
}
