% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roxygen.R
\name{Readable Controller}
\alias{Readable Controller}
\title{Readable Controller}
\description{
The controller object passed to the ReadableStream's functions is a list with references
to the underlying stream object.
}
\details{
Members:
\itemize{
\item desired_size
\item start_value
}

Methods:
\itemize{
\item emit
\item enqueue
\item close
\item error
}
}
\section{Member \code{desired_size}}{

Reference to streams::\code{ReadableStream$desired_size}

\if{html}{\out{<hr>}}
}

\section{Member \code{start_value}}{

The return value of the stream's start function
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
                # the start value can be used to store a connection for
# reference during the pull method
r <- ReadableStream$new(
    start = function(controller) {
        x <- file(tempfile())
         if (!isOpen(x)) {
               open(x)
          }
       x
    },
    pull = function(controller) {
        out <- readLines(c$start_value, n = 1L)
       if (length(out) > 0L) {
           c$enqueue(out)
       } else {
           c$close()
       }
    }
)
            }}

\if{html}{\out{<hr>}}
}

\section{Method \code{enqueue()}}{

Pushes a chunk of data into the stream's internal queue
\subsection{Arguments}{
\describe{
\item{\code{chunk}}{Data that will be pushed into the stream's queue}
}

\if{html}{\out{<hr>}}
}
}

\section{Method \code{close()}}{

Order the stream to close when possible.

Specifically, the stream will enter a "close_requested" state.
Whenever the internal buffer reaches a size of \code{0}, the stream will stop processing data and will close.
\subsection{Arguments}{
\describe{
\item{\code{chunk}}{Data that will be pushed into the stream's queue}
}

\if{html}{\out{<hr>}}
}
}

\section{Method \code{error()}}{

Orders the stream to be put into an errored state.
\subsection{Arguments}{
\describe{
\item{\code{e}}{Reason given for throwing an error}
}

\if{html}{\out{<hr>}}
}
}

\seealso{
streams::ReadableStream
}
